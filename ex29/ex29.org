#+TITLE: Libraries and Linking

* Type The Code

* What You Should See
I've made this using =Makefile=:
#+BEGIN_SRC sh :exports both :results verbatim
cat Makefile
#+END_SRC

#+RESULTS:
#+begin_example
CFLAGS=-g -O2 -Wall -Isrc -Iinclude -DNDEBUG $(OPTFLAGS)
LIBS=-ldl $(OPTLIBS)
PREFIX?=/usr/local

SOURCES=$(wildcard src/**/*.c src/*.c)
OBJECTS=$(patsubst %.c,%.o,$(SOURCES))

TEST_SRC=$(wildcard tests/*_tests.c)
TESTS=$(patsubst %.c,%,$(TEST_SRC))

BIN_SRC=$(wildcard bin/**/*.c bin/*.c)
BINS=$(patsubst %.c,%,$(BIN_SRC))

TARGET=build/libex29.a
SO_TARGET=$(patsubst %.a,%.so,$(TARGET))

# The Target Build
all: $(TARGET) $(SO_TARGET) tests $(BINS)

dev: CFLAGS=-g -Wall -Isrc -Iinclude -Wextra $(OPTFLAGS)
dev: all
	./bin/ex29 ./build/libex29.so print_a_message "hello there"
	./bin/ex29 ./build/libex29.so uppercase "hello there"
	./bin/ex29 ./build/libex29.so lowercase "HELLO THERE"
	./bin/ex29 ./build/libex29.so fail_on_purpose "I fail" || true

# Add this if you got an error
# $(TARGET): CFLAGS += -fPIC
$(TARGET): build $(OBJECTS)
	ar rcs $@ $(OBJECTS)
	ranlib $@
$(SO_TARGET): $(TARGET) $(OBJECTS)
	$(CC) -shared -o $@ $(OBJECTS)

$(TESTS): $(TARGET) $(SO_TARGET)

$(BINS): CFLAGS += $(LIBS)

build:
	@mkdir -p build
	@mkdir -p bin

# The Unit Tests
.PHONY: tests
tests: CFLAGS += $(TARGET) -fsanitize=address
tests: $(TESTS)
	sh ./tests/runtests.sh

# The Cleaner
clean:
	rm -rf build $(OBJECTS) $(TESTS) $(BINS)
	rm -f tests/tests.log
	find . -name "*.gc*" -exec rm {} \;
	rm -rf `find . -name "*dSYM" -print`

# The Install
install: all
	install -d $(DESTDIR)/$(PREFIX)/lib/
	install -d $(DESTDIR)/$(PREFIX)/bin/
	install $(TARGET) $(DESTDIR)/$(PREFIX)/lib/
	install $(BINS) $(DESTDIR)/$(PREFIX)/bin/

# The Checker
check:
	@echo Files with potentially dangerous functions.
	@egrep '[^_.>a-zA-Z0-9](str(n?cpy|n?cat|xfrm|n?dup|str|pbrk|tok|_)\
|stpn?cpy|a?sn?printf|byte_)' $(SOURCES) $(BIN_SRC) || true
#+end_example

And here is the results:
#+BEGIN_SRC sh :exports both :results verbatim
make dev
#+END_SRC

#+RESULTS:
#+begin_example
cc -g -Wall -Isrc -Iinclude -Wextra    -c -o src/libex29.o src/libex29.c
ar rcs build/libex29.a src/libex29.o
ranlib build/libex29.a
cc -shared -o build/libex29.so src/libex29.o
sh ./tests/runtests.sh
Running unit tests:

cc -g -Wall -Isrc -Iinclude -Wextra  -ldl     bin/ex29.c   -o bin/ex29
./bin/ex29 ./build/libex29.so print_a_message "hello there"
A STRING: hello there
./bin/ex29 ./build/libex29.so uppercase "hello there"
HELLO THERE
./bin/ex29 ./build/libex29.so lowercase "HELLO THERE"
hello there
./bin/ex29 ./build/libex29.so fail_on_purpose "I fail" || true
#+end_example

It would be better to move =ex29.c= to =tests= directory since what is does is
to test.

* How to Break It
+ Open =libex29.so= and edit it with an editor that can handle binary files.
  Change a couple of bytes, then close it. Try to see if you can get the
  =dlopen= function to load it even though you've corrupted it.

  Here is the results:
  #+BEGIN_SRC sh :exports both :results verbatim :prologue "exec 2>&1" :epilogue "true"
make dev
  #+END_SRC

  #+RESULTS:
  : sh ./tests/runtests.sh
  : Running unit tests:
  :
  : ./bin/ex29 ./build/libex29.so print_a_message "hello there"
  : [ERROR] (bin/ex29.c:18: errno: None) Failed to open the library ./build/libex29.so: dlopen(./build/libex29.so, 2): no suitable image found.  Did find:
  : 	./build/libex29.so: malformed mach-o image: load command #9 length (0) too small in ./build/libex29.so
  : 	...: malformed mach-o image: load command #9 length (0) too small in .../build/libex29.so
  : make: *** [dev] Error 1

* Extra Credit
+ Were you paying attention to the bad code I have in the =libex29.c= functions?
  Do you see how, even though I use a =for-loop= they still check for ='\0'=
  endings? Fix this so that the functions always take a length for the string to
  work with inside the function.

  [[file:src/libex29.c::#include <stdio.h>][Here]] is the result.

  And make the test code compatible:
  #+BEGIN_SRC C
typedef int (*lib_function)(const char *data, int data_length);
,*** In main
    rc = func(data, strlen(data));
  #+END_SRC

  Then test:
  #+BEGIN_SRC sh :exports both :results verbatim :prologue "exec 2>&1" :epilogue "true"
make dev
  #+END_SRC

  #+RESULTS:
  #+begin_example
  sh ./tests/runtests.sh
  Running unit tests:

  cc -g -Wall -Isrc -Iinclude -Wextra  -ldl     bin/ex29.c   -o bin/ex29
  bin/ex29.c:27:34: warning: format specifies type 'int' but the argument has type 'unsigned long' [-Wformat]
            func_to_run, rc, data, strlen(data));
                                   ^~~~~~~~~~~~
  include/dbg.h:27:22: note: expanded from macro 'check'
          log_err(M, ##__VA_ARGS__); errno=0; goto error; }
                  ~    ^~~~~~~~~~~
  include/dbg.h:18:70: note: expanded from macro 'log_err'
                                  __FILE__, __LINE__, clean_errno(), ##__VA_ARGS__)
                                                                       ^~~~~~~~~~~
  1 warning generated.
  ./bin/ex29 ./build/libex29.so print_a_message "hello there"
  A STRING: hello there./bin/ex29 ./build/libex29.so uppercase "hello there"
  HELLO THERE
  ./bin/ex29 ./build/libex29.so lowercase "HELLO THERE"
  hello there
  ./bin/ex29 ./build/libex29.so fail_on_purpose "I fail" || true
  [ERROR] (bin/ex29.c:27: errno: None) Function fail_on_purpose return 1 for data: I fail with length of 6
  #+end_example
+ Take the =c-skeleton=, and create a new project for this exercise. Put the
  =libex29.c= file in the =src/= directory. Change the =Makefile= so that it
  builds as =build/libex29.so=.

  I've already done that; but our =Makefile= is unnecessarily complicate to
  support any feature which actually not used at all.

  First let's try to remove =target= since, in this exercise, we do not use
  static library at all:
  #+BEGIN_SRC sh :exports both :results output
cat Makefile
  #+END_SRC

  #+RESULTS:
  #+begin_example
  CFLAGS=-g -O2 -Wall -Isrc -Iinclude -DNDEBUG $(OPTFLAGS)
  LIBS=-ldl $(OPTLIBS)
  PREFIX?=/usr/local

  SOURCES=$(wildcard src/**/*.c src/*.c)
  OBJECTS=$(patsubst %.c,%.o,$(SOURCES))

  TEST_SRC=$(wildcard tests/*_tests.c)
  TESTS=$(patsubst %.c,%,$(TEST_SRC))

  BIN_SRC=$(wildcard bin/**/*.c bin/*.c)
  BINS=$(patsubst %.c,%,$(BIN_SRC))

  SO_TARGET=build/libex29.so

  # The Target Build
  all: $(SO_TARGET) tests $(BINS)

  dev: CFLAGS=-g -Wall -Isrc -Iinclude -Wextra $(OPTFLAGS)
  dev: all
      ./bin/ex29 ./build/libex29.so print_a_message "hello there"
      ./bin/ex29 ./build/libex29.so uppercase "hello there"
      ./bin/ex29 ./build/libex29.so lowercase "HELLO THERE"
      ./bin/ex29 ./build/libex29.so fail_on_purpose "I fail" || true

  # Add this if you got an error
  $(SO_TARGET): build $(OBJECTS)
      $(CC) -shared -o $@ $(OBJECTS)

  $(TESTS): $(SO_TARGET)

  $(BINS): CFLAGS += $(LIBS)

  build:
      @mkdir -p build
      @mkdir -p bin

  # The Unit Tests
  .PHONY: tests
  tests: CFLAGS += -fsanitize=address
  tests: $(TESTS)
      sh ./tests/runtests.sh

  # The Cleaner
  clean:
      rm -rf build $(OBJECTS) $(TESTS) $(BINS)
      rm -f tests/tests.log
      find . -name "*.gc*" -exec rm {} \;
      rm -rf `find . -name "*dSYM" -print`

  # The Install
  install: all
      install -d $(DESTDIR)/$(PREFIX)/lib/
      install -d $(DESTDIR)/$(PREFIX)/bin/
      install $(SO_TARGET) $(DESTDIR)/$(PREFIX)/lib/
      install $(BINS) $(DESTDIR)/$(PREFIX)/bin/

  # The Checker
  check:
      @echo Files with potentially dangerous functions.
      @egrep '[^_.>a-zA-Z0-9](str(n?cpy|n?cat|xfrm|n?dup|str|pbrk|tok|_)\
  |stpn?cpy|a?sn?printf|byte_)' $(SOURCES) $(BIN_SRC) || true
  #+end_example
+ Take the =ex29.c= file and put it in =tests/ex29_tests.c= so that it runs as a
  unit test. Make this all work, which means that you'll have to change it so
  that it loads the =build/libex29.so= file and runs tests similar to what I
  (Zed) did manually above (In text).

  To do with this, we need to move the source file in =bin= directory to tests;
  remove all the =bin= related code in =Makefile=.

  The result is following:

  #+BEGIN_SRC sh :exports both :results output
cat Makefile
  #+END_SRC

  #+RESULTS:
  #+begin_example
  CC=clang						#to work around system defined cc, which linked to system clang
  CFLAGS=-g -O2 -Wall -Isrc -Iinclude -DNDEBUG $(OPTFLAGS)
  LIBS=-ldl $(OPTLIBS)
  PREFIX?=/usr/local

  SOURCES=$(wildcard src/**/*.c src/*.c)
  OBJECTS=$(patsubst %.c,%.o,$(SOURCES))

  TEST_SRC=$(wildcard tests/*_tests.c)
  TESTS=$(patsubst %.c,%,$(TEST_SRC))


  SO_TARGET=build/libex29.so

  # The Target Build
  all: $(SO_TARGET) tests

  dev: CFLAGS=-g -Wall -Isrc -Iinclude -Wextra $(OPTFLAGS)
  dev: all

  # Add this if you got an error
  $(SO_TARGET): build $(OBJECTS)
      $(CC) -shared -o $@ $(OBJECTS)

  $(TESTS): $(SO_TARGET)

  build:
      @mkdir -p build
      @mkdir -p bin

  # The Unit Tests
  .PHONY: tests
  tests: CFLAGS += -fsanitize=address $(LIBS)
  tests: $(TESTS)
      sh ./tests/runtests.sh

  # The Cleaner
  clean:
      rm -rf build $(OBJECTS) $(TESTS)
      rm -f tests/tests.log
      find . -name "*.gc*" -exec rm {} \;
      rm -rf `find . -name "*dSYM" -print`

  # The Install
  install: all
      install -d $(DESTDIR)/$(PREFIX)/lib/
      install $(SO_TARGET) $(DESTDIR)/$(PREFIX)/lib/

  # The Checker
  check:
      @echo Files with potentially dangerous functions.
      @egrep '[^_.>a-zA-Z0-9](str(n?cpy|n?cat|xfrm|n?dup|str|pbrk|tok|_)\
  |stpn?cpy|a?sn?printf|byte_)' $(SOURCES) || true
  #+end_example

  Then test!
  #+BEGIN_SRC sh :exports both :results verbatim :prologue "exec 2>&1" :epilogue "true"
make
  #+END_SRC

  #+RESULTS:
  : clang						 -g -O2 -Wall -Isrc -Iinclude -DNDEBUG    -c -o src/libex29.o src/libex29.c
  : clang						 -shared -o build/libex29.so src/libex29.o
  : clang						 -g -O2 -Wall -Isrc -Iinclude -DNDEBUG  -fsanitize=address -ldl     tests/ex29_tests.c build/libex29.so   -o tests/ex29_tests
  : sh ./tests/runtests.sh
  : Running unit tests:
  : ERROR in test tests/ex29_tests: here's tests/tests.log
  : ------
  : [ERROR] (tests/ex29_tests.c:10: errno: None) USAGE: ex29 libex29.so funciton data
  : make: *** [tests] Error 1

  Oops we should have mimicked the commandline arguments as
  #+BEGIN_SRC C
#include <stdio.h>
#include "dbg.h"
#include <dlfcn.h>

typedef int (*lib_function)(const char *data, int data_length);

int test_main(int argc, char *argv[])
{
    int rc = 0;
    check(argc == 4, "USAGE: ex29 libex29.so funciton data");

    char *lib_file = argv[1];
    char *func_to_run = argv[2];
    char *data = argv[3];

    void *lib = dlopen(lib_file, RTLD_NOW);
    check(lib != NULL, "Failed to open the library %s: %s", lib_file,
          dlerror());

    lib_function func = dlsym(lib, func_to_run);
    check(func != NULL,
          "Did not find %s function in the library %s: %s", func_to_run,
          lib_file, dlerror());

    rc = func(data, strlen(data));
    check(rc == 0, "Function %s return %d for data: %s with length of %d",
          func_to_run, rc, data, (int) strlen(data));

    rc = dlclose(lib);
    check(rc == 0, "Failed to close %s", lib_file);

    return 0;

error:
    return 1;
}

int main(int argc, char *argv[])
{
    char *fake_argv[] = { "ex29", "../build/libex29.so",
                          "print_a_message", "hello there"};
    char fake_argc = sizeof fake_argv / sizeof fake_argv[0];

    int rc = test_main(fake_argc, fake_argv);
    check(rc == 0, "Error occured during first test clause.");

    fake_argv[2] = "uppercase";
    rc = test_main(fake_argc, fake_argv);
    check(rc == 0, "Error occured during second test clause.");

    fake_argv[2] = "lowercase";
    fake_argv[3] = "HELLO THERE";
    rc = test_main(fake_argc, fake_argv);
    check(rc == 0, "Error occured during third test clause.");

    fake_argv[2] = "fail_on_purpose";
    fake_argv[3] = "I fail";
    rc = test_main(fake_argc, fake_argv);
    check(rc == 1, "Fourth test clause supposed to fail but not.");

    return 0;
error:
    return 1;
}
  #+END_SRC

  #+BEGIN_SRC sh :exports both :results verbatim :prologue "exec 2>&1" :epilogue "true"
make
  #+END_SRC

  #+RESULTS:
  #+begin_example
  clang						 -g -O2 -Wall -Isrc -Iinclude -DNDEBUG    -c -o src/libex29.o src/libex29.c
  clang						 -shared -o build/libex29.so src/libex29.o
  clang						 -g -O2 -Wall -Isrc -Iinclude -DNDEBUG  -fsanitize=address -ldl     tests/ex29_tests.c build/libex29.so   -o tests/ex29_tests
  sh ./tests/runtests.sh
  Running unit tests:
  A STRING: hello there
  HELLO THERE
  hello there
  tests/ex29_tests PASS

  #+end_example
+ Read the =man dlopen= documentation and read about all of the related
  functions. Try some of the other options to =dlopen= beside =RTLD_NOW=.

  Let's try =RTLD_LAZY= option instead:
  #+BEGIN_SRC C
    void *lib = dlopen(lib_file, RTLD_LAZY);
  #+END_SRC

  #+BEGIN_SRC sh :exports both :results verbatim :prologue "exec 2>&1" :epilogue "true"
make tests
  #+END_SRC

  #+RESULTS:
  : clang						 -g -O2 -Wall -Isrc -Iinclude -DNDEBUG  -fsanitize=address -ldl     tests/ex29_tests.c build/libex29.so   -o tests/ex29_tests
  : rm -f tests/tests.log
  : sh ./tests/runtests.sh
  : Running unit tests:
  : A STRING: hello there
  : HELLO THERE
  : hello there
  : tests/ex29_tests PASS
  : 

  No difference at all as expected.

  Secondly, try to add another mode option, =RTLD_LOCAL=. According to man page,
  it would be more fast than default -- =RTLD_GLOBAL= -- since =ld= searches
  directly using the record.
